trigger:
- main

pool:
  name: 'webapppool'

variables:
  - group: Myappsecrets  # SONAR_TOKEN, DOCKERHUB_USERNAME, DOCKERHUB_PASSWORD burada olmalÄ±

stages:
# 1. Static Analysis Stage
- stage: StaticAnalysis
  displayName: 'OWASP + SonarScanner'
  jobs:
  - job: StaticAnalysisJob
    displayName: 'Run OWASP & SonarQube Analysis'
    steps:
    - checkout: self

    # OWASP Dependency-Check
    - script: |
        mkdir -p $(Build.ArtifactStagingDirectory)/owasp
        chmod -R 777 $(Build.ArtifactStagingDirectory)/owasp

        docker run --rm \
          -v $(Build.SourcesDirectory):/src:ro \
          -v $(Build.ArtifactStagingDirectory)/owasp:/reports \
          -v /opt/dependency-check-data:/usr/share/dependency-check/data \
          owasp/dependency-check:latest \
          --scan /src \
          --format ALL \
          --project "$(Build.Repository.Name)" \
          --out /reports
      displayName: 'Run OWASP Dependency-Check'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish OWASP Reports'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/owasp'
        ArtifactName: 'dependency-check-report'

    # SonarScanner CLI (wait=true)
    - script: |
        /opt/sonar-scanner-5.0.1.3006-linux/bin/sonar-scanner \
          -Dsonar.login=$(SONAR_TOKEN) \
          -Dsonar.qualitygate.wait=true \
          -X
      displayName: 'Run SonarScanner'

# 2. Build Docker Image Stage
- stage: BuildImage
  displayName: 'Docker Build'
  dependsOn: StaticAnalysis
  jobs:
  - job: DockerBuildJob
    displayName: 'Build Docker Image'
    steps:
    - checkout: self
    - script: |
        IMAGE_NAME=my-nodejs-app
        IMAGE_TAG=$(Build.BuildId)
        docker build -t $IMAGE_NAME:$IMAGE_TAG .
        echo "IMAGE_NAME=$IMAGE_NAME" >> $(Build.ArtifactStagingDirectory)/image_info.env
        echo "IMAGE_TAG=$IMAGE_TAG" >> $(Build.ArtifactStagingDirectory)/image_info.env
      displayName: 'Build Docker Image'
    - publish: $(Build.ArtifactStagingDirectory)/image_info.env
      artifact: image_info

# 3. Scan and Push Stage
- stage: ScanAndPush
  displayName: 'Trivy Scan + Docker Hub Push'
  dependsOn: BuildImage
  jobs:
  - job: ScanAndPushJob
    displayName: 'Trivy Scan then Push to Docker Hub'
    steps:
    - download: current
      artifact: image_info

    # Trivy Scan Step
    - script: |
        source $(Pipeline.Workspace)/image_info/image_info.env
        echo "Scanning $IMAGE_NAME:$IMAGE_TAG"

        # Trivy scan - fail if CRITICAL/HIGH
        trivy image --exit-code 1 --severity CRITICAL,HIGH $IMAGE_NAME:$IMAGE_TAG

        # Save JSON report
        trivy image --format json --output $(Build.ArtifactStagingDirectory)/trivy-report.json $IMAGE_NAME:$IMAGE_TAG
      displayName: 'Trivy Image Scan - FAIL on CRITICAL/HIGH'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Trivy Report'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/trivy-report.json'
        ArtifactName: 'trivy-report'

    # Docker Push Step
    - script: |
        source $(Pipeline.Workspace)/image_info/image_info.env
        echo $(DOCKERHUB_PASSWORD) | docker login -u $(DOCKERHUB_USERNAME) --password-stdin
        DOCKERHUB_REPO=$(DOCKERHUB_USERNAME)/$IMAGE_NAME
        docker tag $IMAGE_NAME:$IMAGE_TAG $DOCKERHUB_REPO:$IMAGE_TAG
        docker push $DOCKERHUB_REPO:$IMAGE_TAG
      displayName: 'Push Docker Image to Docker Hub'
